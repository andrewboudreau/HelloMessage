@page
@model ApprovalWebApp.Pages.AuditsModel
@{
    ViewData["Title"] = "Audits";
}

@section Styles{
    <style>
        .approval--badge {
            width: 20px;
            margin: 3px;
        }

        .approval--badge__True {
            background-color: forestgreen;
        }

        .approval--badge__False {
            background-color: lightpink;
        }

        .approval--response {
            background-color: #e2e2e2;
        }
    </style>
}

<table class="table table-sm">
    <thead>
        <tr>
            <th>Submission</th>
            <th>Created</th>
            <th>Approved</th>
            <th>On</th>
            <th>By</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var audit in Model.Audits)
        {
            <tr>
                <td>@audit.SubmitterId</td>
                <td>@TimeAgo(audit.SubmissionCreated)</td>
                <td class="approval--cell"><span class="approval--badge approval--badge__@audit.Approved">&nbsp;</span> @audit.Approved</td>
                <td class="approval--cell">@TimeAgo(@audit.ResponseCreated)</td>
                <td class="approval--cell">@audit.ApproverId</td>
            </tr>
        }
    </tbody>
</table>

<div class="modal alert alert-danger fade" id="ErrorModal" tabindex="-1" role="dialog" aria-labelledby="ErrorModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div>Connection Error...</div>
                <div><strong style="font-size: 1.5em;">Hit Refresh/F5</strong> to refresh. ;)</div>
            </div>
        </div>
    </div>
</div>

@section Scripts{  <!--Reference the SignalR library. -->
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@3.1.8/dist/browser/signalr.min.js"></script>

    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {

            function onConnectionError(error) {
                if (error && error.message) {
                    console.error(error.message);
                }

                var modal = document.getElementById('ErrorModal');
                modal.classList.add('in');
                modal.style = 'display: block;';
            }

            const connection = new signalR.HubConnectionBuilder()
                .withUrl('/hubs/approval').build();

            // connection.on('broadcastMessage', (name, message) => console.log(`${name} was ${message}`));
            connection.on('broadcastMessage', (name, message) => window.location.href = window.location.href);

            connection.onclose(onConnectionError);

            connection.start();
        });
    </script>
}

@functions{
    public string TimeAgo(DateTimeOffset input)
    {
        const int SECOND = 1;
        const int MINUTE = 60 * SECOND;
        const int HOUR = 60 * MINUTE;
        const int DAY = 24 * HOUR;
        const int MONTH = 30 * DAY;

        var ts = DateTimeOffset.Now - input;
        double delta = Math.Abs(ts.TotalSeconds);

        if (delta < 1 * MINUTE)
            return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

        if (delta < 2 * MINUTE)
            return "a minute ago";

        if (delta < 120 * MINUTE)
            return ts.Minutes + " minutes ago";

        if (delta < 24 * HOUR)
            return ts.Hours + " hours ago";

        if (delta < 48 * HOUR)
            return "yesterday";

        if (delta < 30 * DAY)
            return ts.Days + " days ago";

        if (delta < 12 * MONTH)
        {
            int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
            return months <= 1 ? "one month ago" : months + " months ago";
        }
        else
        {
            int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
            return years <= 1 ? "one year ago" : years + " years ago";
        }
    }
}